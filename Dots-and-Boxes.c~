/*******************************************************
This program was created by the
CodeWizardAVR V3.14 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 5/9/2025
Author  : 
Company : 
Comments: 


Chip type               : ATmega64
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 1024
*******************************************************/

#include <mega64.h>

#include <alcd.h>

#include <delay.h>

#include <stdio.h>

#include <string.h>

#include <stdbool.h>

char keypad[4][3] = {
    '1','2','3',
    '4','5','6',
    '7','8','9',
    '*','0','#'
};

char initial_board[3][10] = {
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ', 
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' '
};
char board[3][10];

int directions[4][2] = {
        {-1, -1},
        {-1,  0},
        { 0, -1},
        { 0,  0}
};

int scores[2] = {0,0}; 

int turn = 0;
char symbol;
char flags[2] = {
    'A','B'
};

char inputS[3] = {'-','-','\0'};
int digits[2];
int inputI;

char scanKeypad();

void startGame();

void printBoard();

void printScores();

void printInput();

void printTurn();

void printLCD();

void printError(int error);

void getInput();

bool checkInput();

bool updateScore();

bool gameOver();

void printWinner();

void main(void)
{
{
// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Port E initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);

// Port F initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);

// Port G initialization
// Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
// State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
ASSR=0<<AS0;
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// OC1C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
OCR1CH=0x00;
OCR1CL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer/Counter 3 initialization
// Clock source: System Clock
// Clock value: Timer3 Stopped
// Mode: Normal top=0xFFFF
// OC3A output: Disconnected
// OC3B output: Disconnected
// OC3C output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer3 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare C Match Interrupt: Off
TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
TCNT3H=0x00;
TCNT3L=0x00;
ICR3H=0x00;
ICR3L=0x00;
OCR3AH=0x00;
OCR3AL=0x00;
OCR3BH=0x00;
OCR3BL=0x00;
OCR3CH=0x00;
OCR3CL=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
// INT3: Off
// INT4: Off
// INT5: Off
// INT6: Off
// INT7: Off
EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);

// USART0 initialization
// USART0 disabled
UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);

// USART1 initialization
// USART1 disabled
UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 4
// D5 - PORTA Bit 5
// D6 - PORTA Bit 6
// D7 - PORTA Bit 7
// Characters/line: 20
lcd_init(20);
}
while (1)
      {  
      startGame();
      printLCD();
      while (!gameOver()) {
            symbol = (turn == 0) ? '*' : '#';
            printTurn();
            getInput();
            board[digits[0] - 1][digits[1]] = symbol;
            if (updateScore() == false ){
                turn = 1 - turn;
            } else {
                printScores();
            }
            printBoard();
      }
      printWinner();
    }
}

char scanKeypad() {
    int row,col;
    while (1) {
        for (row = 0; row < 4; row++) {
            PORTD &= ~(1 << row);
            for (col = 0; col < 3; col++) {
                if (!(PIND & (1 << (col + 4)))) {
                    delay_ms(250);
                    PORTD |= (1 << row);
                    return keypad[row][col];
                }
            }
            PORTD |= (1 << row);
        }
    }

}

void startGame() {
    
    lcd_clear();
    memcpy(board, initial_board, sizeof(board));
    PORTB = 0x00;
    PORTC = 0x00;
    scores[0] = scores[1] = digits[0] = digits[1] = 0;
    turn = 0;
    
    lcd_gotoxy(6,0);
    lcd_puts("Sadeghian");
    lcd_gotoxy(4,1);
    lcd_puts("press any key");
    lcd_gotoxy(6,2);
    lcd_puts("to start");
    scanKeypad();
    lcd_clear();
}

void printBoard() {
    int row,col;
    lcd_gotoxy(0,0);
    lcd_puts(" 0123456789");
    for (row = 0;row < 3;row++) {
        lcd_gotoxy(0,(row + 1));
        lcd_putchar(('0' + row + 1));
        for (col = 0;col < 10;col++) {
            lcd_putchar(board[row][col]);
        };    
    };
    lcd_gotoxy(0,0);
}

void printScores() {
    char buffer[6];
    
    lcd_gotoxy(14,0);
    sprintf(buffer, "*P1=%d", scores[0]);
    lcd_puts(buffer);
    PORTB = scores[0];
    
    lcd_gotoxy(14,1);
    sprintf(buffer, "#P2=%d", scores[1]);
    lcd_puts(buffer);
    PORTC = scores[1];
    
    lcd_gotoxy(0,0);

}

void printInput() {
    lcd_gotoxy(15,3);
    lcd_puts("N=");
    lcd_gotoxy(17,3);
    lcd_puts(inputS);
    lcd_gotoxy(0,0);

}

void printLCD () {
    lcd_clear();
    printBoard();
    printScores();
    printInput();
    printTurn();
    lcd_gotoxy(0,0);
}

void printTurn() {
    lcd_gotoxy(12,turn);
    lcd_puts("->");
    lcd_gotoxy(12,(1 - turn));
    lcd_puts("  ");
    lcd_gotoxy(0,0);
}

void printError(int error) {
    lcd_clear();
    PORTB = 0x00;
    PORTC = 0x00;
    
    switch (error) {
        case 1:
            lcd_puts("invalid input");
            break;
        
        case 2:
            lcd_puts("out of range input");
            break;
                
        case 3:
            lcd_puts("chosen box is taken");
            break;
        
        default: 
            lcd_puts("unknown error");
        };
    lcd_gotoxy(0,2);
    lcd_puts("press any key \nto continue");
    scanKeypad();
    lcd_clear();
    printLCD();
}

void getInput() {
    get:
    do {
        inputS[0] = '-', inputS[1] = '-';
        printInput();
        lcd_gotoxy(11,2);
        lcd_puts("         ");
        inputS[0] = scanKeypad();
        printInput();
        inputS[1] = scanKeypad();
        printInput();
        lcd_gotoxy(11,2);
        lcd_puts("*=confirm");
        lcd_gotoxy(0,0);
    } while (scanKeypad() != '*');
    if (checkInput() != true) {
        goto get;
    }
    inputS[0] = '-', inputS[1] = '-'; 
}

bool checkInput() {
    if (strchr("#*", inputS[0]) || strchr("#*", inputS[1])) {
        printError(1);
        return false;
    }
    digits[0] = (inputS[0] - '0');
    digits[1] = (inputS[1] - '0');
    inputI = digits[0] * 10 + digits[1];
    if (inputI < 10 || inputI > 39) {
        printError(2);
        return false;
    }
    if (board[digits[0] - 1][digits[1]] != ' ') {
        printError(3);
        return false;
    }
    return true;
}

bool updateScore() {
    int i;
    char r = digits[0] - 1;
    char c = digits[1];
    int nr;
    int nc;
    for (i = 0; i < 4; i++) {
        nr = r + directions[i][0];
        nc = c + directions[i][1];

        if (nr >= 0 && nr < 2 && nc >= 0 && nc < 9) {
            if ((board[nr][nc]     == symbol || board[nr][nc]     == flags[turn]) &&
                (board[nr][nc + 1] == symbol || board[nr][nc + 1] == flags[turn]) && 
                (board[nr + 1][nc] == symbol || board[nr + 1][nc] == flags[turn]) &&
                (board[nr + 1][nc + 1] == symbol || board[nr + 1][nc + 1] == flags[turn])) {
                scores[turn] += 1;
                board[nr][nc] = board[nr][nc + 1] = board[nr + 1][nc] = board[nr + 1][nc + 1] = flags[turn];
                return true;
            }
        }
    }
    return false;
}

bool gameOver() {
    int i,j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 10; j++) {
            if (board[i][j] == ' ') {
                return false;
            };
        };
    };
    return true;
}

void printWinner() {
    lcd_clear();
    lcd_gotoxy(4,0);
    if (scores[0] > scores[1]) {
        lcd_puts("P1 is winner!");    
    } else if (scores[0] < scores[1]) {
        lcd_puts("P2 is winner!");
    } else {
        lcd_puts(" match tied!");
    }
    lcd_gotoxy(4,1);
    lcd_puts("press any key");
    lcd_gotoxy(5,2);
    lcd_puts("to continue");
    scanKeypad();
    lcd_clear();
}